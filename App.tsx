
import React, { useState, useCallback } from 'react';
import { getSongChords } from './services/geminiService';
import type { SongData } from './types';
import SearchBar from './components/SearchBar';
import ChordDisplay from './components/ChordDisplay';
import Loader from './components/Loader';
import { GuitarIcon } from './components/icons/GuitarIcon';
import { MicrophoneIcon } from './components/icons/MicrophoneIcon';

const App: React.FC = () => {
  const [songData, setSongData] = useState<SongData | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  const handleSearch = useCallback(async (songName: string) => {
    if (!songName.trim()) {
      setError("Please enter a song name.");
      return;
    }
    setIsLoading(true);
    setError(null);
    setSongData(null);

    try {
      const data = await getSongChords(songName);
      if (data && data.songTitle) {
        setSongData(data);
      } else {
        throw new Error("Song not found or could not be analyzed. Please try another song.");
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : "An unknown error occurred.";
      setError(`Failed to fetch chords: ${errorMessage}`);
    } finally {
      setIsLoading(false);
    }
  }, []);

  const renderContent = () => {
    if (isLoading) {
      return <Loader />;
    }
    if (error) {
      return (
        <div className="text-center text-red-400 bg-red-900/50 p-6 rounded-lg border border-red-700">
          <p className="font-semibold">Oops! Something went wrong.</p>
          <p>{error}</p>
        </div>
      );
    }
    if (songData) {
      return <ChordDisplay songData={songData} />;
    }
    return (
      <div className="text-center text-zinc-400 pt-8">
        <div className="flex justify-center items-center gap-8 mb-6">
          <GuitarIcon className="w-20 h-20 text-zinc-500" />
          <MicrophoneIcon className="w-20 h-20 text-zinc-500" />
        </div>
        <h2 className="text-2xl font-bold text-zinc-200 mb-2">Welcome to the AI Chord Studio</h2>
        <p>Enter a song above to start your session.</p>
        <p>For example, "Stairway to Heaven by Led Zeppelin".</p>
      </div>
    );
  };

  return (
    <div className="min-h-screen text-zinc-100 font-roboto-mono flex flex-col items-center p-4 sm:p-6 lg:p-8">
      <main className="w-full max-w-4xl">
        <header className="text-center mb-8">
          <h1 className="text-4xl sm:text-5xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-amber-300 to-orange-500 pb-2">
            AI Chord Studio
          </h1>
          <p className="text-zinc-400 mt-2">
            Your personal session guitarist, powered by Gemini.
          </p>
        </header>
        
        <div className="sticky top-4 z-10 bg-zinc-900/80 backdrop-blur-sm p-4 rounded-xl shadow-2xl border border-zinc-700/80 mb-8">
          <SearchBar onSearch={handleSearch} isLoading={isLoading} />
        </div>

        <div className="w-full">
          {renderContent()}
        </div>

        <footer className="text-center mt-12 text-zinc-500 text-sm">
            <p>Generated by Google Gemini. Chords and lyrics may not be 100% accurate.</p>
        </footer>
      </main>
    </div>
  );
};

export default App;